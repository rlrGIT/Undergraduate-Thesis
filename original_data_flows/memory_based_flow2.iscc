# A[(t+1)%2][i] = A[t%2][i-1] + A[t%2][i] + A[t%2][i+1] / 3;

iterationSpace := [T, N] -> { yield[t, i] : 1 <= t < T and 1 <= i < N };

yieldExpr := [T, N] -> { yield[t, i] -> exe[a, b] : t = a and i = b }; 

exeToWrite := [T, N] -> { exe[a, b] -> A[a + 1, b] };

exeToRead := [T, N] -> { exe[a, b] -> A[a, b - 1] }; 

currentFlow := (exeToWrite . (exeToRead^-1));

boundSpace := unwrap((yieldExpr(iterationSpace) cross yieldExpr(iterationSpace)));

boundCurrentFlow := boundSpace * currentFlow;

forward := [T, N] -> { exe[a, b] -> exe[a', b'] : (a < a') or (a = a' and b < b') };

forwardBoundCF := boundCurrentFlow * forward;

forwardBoundCF;
