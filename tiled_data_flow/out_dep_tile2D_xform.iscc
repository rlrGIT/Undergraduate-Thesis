iterationSpace2D := [T, N] -> { yield[i0, i1] : 0 <= i0 < T and 0 <= i1 < N };

yield2D := [T, N] -> { yield[i0, i1] -> exe[a, b] : a = i0 and b = i1 };

exeToWrite := [T, N] -> { exe[a, b] -> A[(a+1)%2, b] }; #copy from subscripts of write

currentFlow := (exeToWrite . (exeToWrite^-1));

boundCross2D := unwrap((yield2D(iterationSpace2D) cross yield2D(iterationSpace2D)));

boundCF2D := boundCross2D * currentFlow; 

#forward2DYield := [T, N] -> { yield[i0, i1] -> yield[i0', i1'] : (i0 < i0') or (i0 = i0' and i1 < i1') };

#forward2D := yield2D^-1 . forward2DYield . yield2D; 
forward2D := [T, N] -> { exe[a, b] -> exe[a', b'] : a < a' or (a = a' and b < b') };

forwardBoundCF2D := boundCF2D * forward2D;
print("printing original iteration space memory flow dependence (CF)"); forwardBoundCF2D;


# as yielded by tile2D * iterationSpace2D
iterationSpace4D := [T, N] -> { yield[c0, c1, c2, c3] : 
				0 <= c2 < T and 
				0 <= c3 < N and 
				-7 + c3 <= 8 * c0 <= c3 and 
				-7 + c2 <= 8 * c1 <= c2 };

yield4D := [T, N] ->  { yield[c0, c1, c2, c3] -> exe[a, b] : a = c2 and b = c3 };

exeToWrite4D := [T, N] -> { exe[a, b] -> A[(a+1)%2, b] }; #copy from subscripts of write

#makes sense to understand this from perspective of exe space
currentFlow4D := (exeToWrite4D . (exeToWrite4D^-1));

boundCross4D := unwrap((yield4D(iterationSpace4D) cross yield4D(iterationSpace4D)));

boundCF4D := boundCross4D * currentFlow4D;
# forward in time relation defines the order of yields - only really makes sense in yield space - so yield -> yield
forward4DYield := [T, N] -> { yield[c0, c1, c2, c3] -> yield[c0', c1', c2', c3'] : (c0 < c0')
					or (c0 = c0' and c1 < c1')
					or (c0 = c0' and c1 = c1' and c2 < c2')
					or (c0 = c0' and c1 = c1' and c2 = c2' and c3 < c3')
};				


#forward4D := yield4D^-1 . forward4DYield . yield4D; 

forward4D := { exe[a, b] -> exe[a', b'] : a < a' or (a = a' and b < b') };

forwardBoundCF4D := boundCF4D * forward4D;
print("printing tiled iteration space memory "); forwardBoundCF4D;

# difference of relations (domain and codomain)
Diff1:= forwardBoundCF4D - forwardBoundCF2D;
Diff2:= forwardBoundCF2D - forwardBoundCF4D;
print("printing relational differences:");
print("4d space minus 2d space: "); Diff1;
print("2d space minus 4d space: "); Diff2;

### limit := [T, N] -> { exe[a, b] -> exe[c, d] : 2<=T<=5 and 4<=N<=5 };
### sample(Diff2 * limit);
### badone := [T, N] -> { exe[0, 4] -> exe[1, 4] : T=3 and N=5 } ;
### print("is badone in the diff?"); Diff2 * badone;
### print("is badone in the forwardBoundCF4D?"); forwardBoundCF4D* badone;
### print("is badone in the forwardBoundCF2D?"); forwardBoundCF2D* badone;
### 
### # qhy not in 4D?
### print("is badone in the forward4D?"); forward4D* badone;
### print("is badone in the BoundCF4D?"); boundCF4D* badone;

### value and memoy: AmIReal := [T, N] -> { exe[0, 3] -> exe[1, 3] : T=5 and N=5 } ;
AmIReal := [T, N] -> { exe[0, 3] -> exe[4, 3] : T = 5 and N = 5 } ;
print("is AmIReal in the forwardBoundCF4D?"); forwardBoundCF4D * AmIReal;
print("is AmIReal in the forwardBoundCF2D?"); forwardBoundCF2D * AmIReal;
